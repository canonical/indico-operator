name: Integration tests

on:
  pull_request:
  workflow_call:
    outputs:
      images:
        description: Pushed docker images
        value: ${{ jobs.get-images.outputs.images }}
  push:
    branches:
      - 'ISD-189-indico-chaos-engineering'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  EXPERIMENT_IMAGE: litmuschaos/go-runner
  EXPERIMENT_IMAGE_TAG: latest
  JOB_CLEANUP_POLICY: delete
  CHAOS_NAMESPACE: testing
  APP_NS: testing
  APP_LABEL: app.kubernetes.io/name=indico
  APP_KIND: statefulset
  IMAGE_PULL_POLICY: Always
  TOTAL_CHAOS_DURATION: 30
  CHAOS_INTERVAL: 10
  FORCE: false

jobs:
  get-images:
    name: Get images
    runs-on: ubuntu-20.04
    outputs:
      images: ${{ env.DOCKER_IMAGES }}
    steps:
      - uses: actions/checkout@v3
      - name: Get dockerfiles
        id: set-images
        run: echo "DOCKER_IMAGES=$(ls *.Dockerfile 2> /dev/null | sed s/\.Dockerfile// |  jq -Rsc '. / "\n" - [""]')" >> $GITHUB_ENV
  build-images:
    name: Build image
    runs-on: ubuntu-20.04
    needs: get-images
    if: ${{ needs.get-images.outputs.images != '[]' }}
    strategy:
      matrix:
        image: ${{ fromJSON(needs.get-images.outputs.images) }}
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push image
        id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ matrix.image }}:${{ github.run_id }}
          file: ${{ matrix.image }}.Dockerfile

  integration-test-microk8s:
    name: Integration tests (microk8s)
    runs-on: ubuntu-20.04
    needs: [get-images, build-images]
    if:  ${{ !failure() }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: microk8s
      - name: Configure GHCR in microk8s
        run: |
          # Adding authentication for ghcr.io for containerd as per https://microk8s.io/docs/registry-private
          # Note: containerd has to be restarted for the changes to take effect
          # (https://github.com/containerd/cri/blob/master/docs/registry.md)
          sudo su -c 'echo "
          [plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"ghcr.io\".auth]
          username = \"${{ github.actor }}\"
          password = \"${{ secrets.GITHUB_TOKEN }}\"
          " >> /var/snap/microk8s/current/args/containerd-template.toml'
          sudo su -c 'systemctl restart snap.microk8s.daemon-containerd.service && microk8s status --wait-ready'

      - name: Run integration tests
        run: |
          echo "CHARM_NAME=$(yq '.name' metadata.yaml)" >> $GITHUB_ENV
          args=""
          for image_name in $(echo '${{ needs.get-images.outputs.images }}' | jq -cr '.[]'); do
            args="${args} --${image_name}-image ${{ env.REGISTRY }}/${{ env.OWNER }}/${image_name}:${{ github.run_id }}"
          done
          tox -e integration -- --model testing --keep-models $args
      - name: Dump logs
        uses: canonical/charm-logdump-action@main
        if: failure()
        with:
          app: ${{ env.CHARM_NAME }}
          model: testing

      - name: Setting up kubeconfig ENV for Github Chaos Action
        run: echo ::set-env name=KUBE_CONFIG_DATA::$(sudo microk8s config | base64 -w 0)
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Setup Litmus
        uses: merkata/github-chaos-actions@master
        env:
          INSTALL_LITMUS: true
          CHAOS_NAMESPACE: testing
          APP_NS: testing

      - name: Running Litmus pod delete chaos experiment
        uses: merkata/github-chaos-actions@master
        env:
          EXPERIMENT_NAME: pod-delete

      - name: Run chaos mesh pod kill action
        uses: chaos-mesh/chaos-mesh-action@v0.5
        env:
          CHAOS_MESH_VERSION: v1.0.0
          CFG_BASE64: YXBpVmVyc2lvbjogY2hhb3MtbWVzaC5vcmcvdjFhbHBoYTEKa2luZDogUG9kQ2hhb3MKbWV0YWRhdGE6CiAgbmFtZTogcG9kLWtpbGwtZXhhbXBsZQogIG5hbWVzcGFjZTogY2hhb3MtbWVzaApzcGVjOgogIGFjdGlvbjogcG9kLWtpbGwKICBtb2RlOiBvbmUKICBzZWxlY3RvcjoKICAgIG5hbWVzcGFjZXM6CiAgICAgIC0gdGVzdGluZwogICAgbGFiZWxTZWxlY3RvcnM6CiAgICAgICdhcHAua3ViZXJuZXRlcy5pby9uYW1lJzogJ2luZGljbycK
