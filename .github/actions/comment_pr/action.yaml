name: Comment on PR
description: Publish a comment on a PR and remove previous bot comments
inputs:
  artifact-name:
    required: true
    description: Artifact containing a JSON file with the list of comments to be published
  github-token:
    required: true
    description: Github token
runs:
  using: composite
  steps:
    - name: Download test report artifact
      uses: actions/github-script@v6.2.0
      with:
        script: |
          const fs = require('fs');
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }},
          });
          const matchArtifact = artifacts.data.artifacts.filter(artifact => 
            artifact.name == '${{ inputs.artifact-name }}'
          )[0];
          const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          fs.writeFileSync('${{ inputs.artifact-name }}.zip', Buffer.from(download.data));
    - shell: bash
      run: unzip ${{ inputs.artifact-name }}.zip
    - name: Comment on PR
      uses: actions/github-script@v6.2.0
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          const comments = JSON.parse(fs.readFileSync('${{ inputs.artifact-name }}.json'));
          
          const issue_number = (await github.rest.actions.getWorkflowRun({
            owner : context.repo.owner,
            repo : context.repo.repo,
            run_id : ${{ github.event.workflow_run.id }},
          })).data.pull_requests[0].number;

          const createComment = async (body) => {
              await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  body,
              });
          }
          
          const deleteGithubActionsComments = async () => {
              const existingComments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
              });
              const githubActionsComments = existingComments.data.filter(
                  comment => comment.user.login == 'github-actions[bot]'
              )
              for (const comment of githubActionsComments) {
                  await github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id,
                  });
              }
          }

          await deleteGithubActionsComments();
          for (const comment of comments) {
              await createComment(comment);
          }
